#!/usr/bin/env python3
"""
Emergency test for severely corrupted Amharic transcriptions
Tests the new emergency cleanup system with the user's latest problematic input
"""

import sys
import os

# Add the backend directory to Python path for imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from main import AmharicSpeechProcessor
except ImportError:
    print("‚ùå Could not import AmharicSpeechProcessor from main.py")
    exit(1)

def test_emergency_correction():
    """Test the emergency correction system with severely corrupted input"""
    
    print("üö® TESTING EMERGENCY AMHARIC CORRUPTION CORRECTION")
    print("=" * 70)
    
    # Initialize the enhanced processor
    processor = AmharicSpeechProcessor()
    
    # User's severely corrupted transcription
    corrupted_input = """·ä£·à®·à®·ã∞·å•·äì·ã≥·àç·àà·à®·à®·ã∞·ã∞·â†·â†·å•·ã≥·å•·â≥·â∂·ã∞·â†·à®·âÄ·àç·àç·å•·ã®·â†·â†·å•·â†·à®·ãç·ä£·â†·à∏·â£·à©·â∞·ãõ·â£·à®·ã∞·à≠·â†·ãµ·ãµ·çã·ãç·ãç·ãµ·â≥·ãç·ã®·âÖ·â†·ãµ·ã®·ã®·â†·à®·â†·å®·ãç·ã∞·å•·ã∞·âÅ·â†·ã∞·ã∞·ã∞·à®·â∞·â∞·â∞·â†·à¨·â∂·â∞·â£·à™·ãç·ãç·ãµ·ã®·â∏·â†·à≠·â†·å•·â†·ã∞·â†·ãõ·â∏·å•·ãç·ãç·àç·à®·â£·à™·âÅ·â†·â∞·â∞·â∞·â∏·å•·ä•·äù·åÄ·à´ ·ãç·å•·â†·â†·â∞·â¶·ã∞·â†·ã≥·àç·ä•·åç·ãà·â≥·à≠·à∂·å•·ãç·å•·å•·àç·à©·à≠·ã®·çÄ·à®·â†·â†·à®·å•·â†·â†·à≠·ã®·â∞·â†·â†·âÜ·â∞·ãã·à®·ãç·ã®·âÜ·â∏·â£·åà·â∞·à©·ã®·ã®·å®·åÄ·å®·à∏·ãç·âÅ·ã®·à®·åà·ãµ·àç·à®·â∂·ãç·à©·ãà·â∞·à©·âÅ·â†·å•·å•·å°·å•·å•·å•·å°·å•·â∂·å•·å•·å•·å•·å•·â∞·â∞·â∞·ã®·â∞·à®·â∞·à™ ·â∞·ãã·ãõ·ä£·å´ ·ä†·àà ·ä£·âÖ·å°·â†·å•·å•·à¨ ·ã®·åà·à®·à∏·å•·å•·â∞·â∏ ·àê·ã´·å•·ãã·â∏ ·å•·â†·å•·å•·å•·à®·â∞·ã≥ ·å•·â∏·â∞·ãã·â∞·à´·ä£ ·âÖ·ä£·å•·å•·å•·â†·ã∞·äõ ·ã´·å•·å•·â†·ã´·àà·ã®·å•·å•·äê·å•·å•·ã®·â†·à®·ã≥·äõ·â∞·â∞·â∞·à´ ·ã®·âª·ã®·â†·â∞·ãã·â∞·â∞·â∂·àΩ·å•·â∂·ã∞·å•·à´ ·ã®·å•·å•·å•·ã®·â†·à®·ã≥·äõ ·â†·äù·ã®·â∂·äù ·ä•·äù·ã∞·äî·â†·â∞·â∞·ãã·â∞ ·ä£·àΩ·å•·â∞·à∏·â≥·à≠·â¶·å•·â∂·à©·å•·ã®·â†·à®·â∞·ã≥·ä£·äõ ·ãç·â∏·à≠·å•·ãò·â†·àò·å•·â∞·ãã·â∞ ·àΩ·å•·âÜ·àΩ·â∞·ãò·å≠·åÄ·âº·å•·å•·å•·ã®·â†·â∞·ã≥ ·â∞·â≥·â†·â∞·å•·å•·ã®·â∞·â∞·ãõ·â∞·å•·ä≥·à®·ãò·ãµ·à≠·àΩ·åÄ·å•·å°·à®·ã≥ ·ä£·âÖ·åà·å•·â∞·ãã·ãõ·ä£·ã∞·â∞ ·å•·ä£·àΩ·â∞·ã∞·ä≠·â∞·â∞·å•·à®·â∞·ã∞·ã´·äõ ·àµ·ãµ·àµ·âµ ·ä£·ã≤·å´ ·ã´·ä£·å•·å•·â†·å•·å•·å†·ã∞·ã´·å•·å•·â†·à®·ã∞·å•·ã∞·à®·â≥·ã®·â∞·à®·à©·å•·â†·â∞·â∞·â∞·ã∞·à¨·ã≥·å£·â∞·å•·â†·ã∞·â∞·â£·å•·å•·å•·å•·â†·â∞·à∏·â∞·ã∞·ä£·â†·à®·å•·äù·â†·ã∞·â£·ã∞·â∞·â∏·â∂·å•·â†·ã∞·ãã·ä£·â†·ã∞·ã∞·å•·â†·å•·â£·å•·å•·å•·å•·ã≥·â†·â∞·â†·ã∞·ã≥·å≠·å•·ã∞·â∏·â∞·â£·â∞·ã∞·ã®·åÄ·å•·ã®·à´·åà·å•·ã∞·å•·ã®·â∞·à≠·â†·â∞·åà·â†·â£·â†·ã®·å•·å•·â∞·â†·å®·ã≥·â∞·â∞·å•·ã≥·â∞·â∞·äì·â∏·ãç·â†·å•·ã®·â∞·ã®·â†·â∞·å®·â∞·â∏·å•·ã∞·â∞·â†·â∏·å°·å•·å•·å•·å•·âÖ·å•·å•·âÖ·å•·å•·å•·å•·å•·å•·å°·å•·å•·å•·â†·å•·å•·ã∞·å•·å°·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·å•·âÖ·å•·å•·å•·â†·å•·å•·å•·å•"""
    
    print("üì• SEVERELY CORRUPTED INPUT:")
    print(f"   Length: {len(corrupted_input)} characters")
    print(f"   Word count: {len(corrupted_input.split())} fragments")
    print(f"   Sample: '{corrupted_input[:200]}...'")
    print()
    
    # Test corruption assessment
    print("üîç ASSESSING CORRUPTION LEVEL...")
    corruption_score = processor.assess_corruption_level(corrupted_input)
    print()
    
    # Test emergency cleanup if needed
    if corruption_score > 0.7:
        print("üö® APPLYING EMERGENCY CLEANUP...")
        emergency_cleaned = processor.emergency_cleanup(corrupted_input)
        print(f"   Emergency result: '{emergency_cleaned[:100]}...'")
        print()
    
    # Test full correction pipeline
    print("üîß APPLYING FULL CORRECTION PIPELINE...")
    corrected_output = processor.correct_amharic_transcription(corrupted_input)
    
    print("\nüì§ EMERGENCY CORRECTED OUTPUT:")
    print(f"   '{corrected_output}'")
    print(f"   Length: {len(corrected_output)} characters")
    print(f"   Word count: {len(corrected_output.split())} words")
    print()
    
    # Analysis of improvements
    print("üìä EMERGENCY CORRECTION ANALYSIS:")
    original_words = len(corrupted_input.split())
    corrected_words = len(corrected_output.split())
    reduction_ratio = (1 - corrected_words / original_words) if original_words > 0 else 0
    
    print(f"   - Original fragments: {original_words}")
    print(f"   - Corrected words: {corrected_words}")
    print(f"   - Reduction ratio: {reduction_ratio:.1%}")
    print(f"   - Corruption score: {corruption_score:.1%}")
    print(f"   - Length change: {((len(corrected_output) - len(corrupted_input)) / len(corrupted_input)):.1%}")
    
    # Test specific corruption patterns
    print("\nüîç TESTING SPECIFIC CORRUPTION PATTERNS:")
    
    test_corruption_patterns = [
        "·å•·å•·å•·å•·å•·å•·å•·å•·å•",  # Excessive repetition
        "·ä£·à®·à®·ã∞·å•·äì·ã≥·àç·àà·à®·à®·ã∞·ã∞",  # Mixed repetition
        "·ã®·å•·å•·å•·ã®·â†·à®·ã≥·äõ·â∞·â∞·â∞·à´",  # Pattern corruption
        "·àµ·ãµ·àµ·âµ",  # Should be preserved (real word)
        "·ä†·àà",     # Should be preserved (real word)
    ]
    
    for pattern in test_corruption_patterns:
        if pattern in corrupted_input:
            corrected_pattern = processor.correct_amharic_transcription(pattern)
            print(f"   '{pattern}' -> '{corrected_pattern}'")
    
    print("\n‚úÖ Emergency correction test completed!")
    
    # Recommendations based on results
    print(f"\nüí° RECOMMENDATIONS:")
    if corruption_score > 0.8:
        print("   üî¥ CRITICAL: Audio quality is extremely poor")
        print("   ‚Ä¢ Check microphone setup and recording environment")
        print("   ‚Ä¢ Reduce background noise significantly") 
        print("   ‚Ä¢ Consider using a different recording device")
        print("   ‚Ä¢ Try speaking more slowly and clearly")
    elif corruption_score > 0.5:
        print("   üü° MODERATE: Audio has significant issues")
        print("   ‚Ä¢ Improve recording environment (reduce noise)")
        print("   ‚Ä¢ Check audio format and sample rate")
        print("   ‚Ä¢ Consider shorter audio segments")
    else:
        print("   üü¢ GOOD: Audio quality is acceptable")
        print("   ‚Ä¢ Current correction system should handle this well")
    
    return corrected_output

def main():
    """Run emergency correction tests"""
    
    try:
        # Test the emergency correction system
        corrected = test_emergency_correction()
        
        print(f"\nüéâ EMERGENCY TESTING COMPLETED!")
        print(f"   The emergency system has been activated to handle")
        print(f"   extremely corrupted transcriptions like yours.")
        
        # Save results for reference
        with open("emergency_test_results.txt", "w", encoding="utf-8") as f:
            f.write("Emergency Amharic Correction Test Results\n")
            f.write("=" * 50 + "\n\n")
            f.write("Corrected Output:\n")
            f.write(corrected + "\n\n")
            f.write("This demonstrates the emergency correction capabilities\n")
            f.write("for extremely corrupted Amharic speech recognition.\n")
        
        print(f"   Results saved to: emergency_test_results.txt")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå EMERGENCY TEST FAILED: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)